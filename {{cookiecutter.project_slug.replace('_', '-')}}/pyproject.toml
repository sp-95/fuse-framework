{%- set license_classifiers = {
    "MIT license": "License :: OSI Approved :: MIT License",
    "BSD license": "License :: OSI Approved :: BSD License",
    "ISC license": "License :: OSI Approved :: ISC License (ISCL)",
    "Apache Software License 2.0": "License :: OSI Approved :: Apache Software License",
    "GNU General Public License v3": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug.replace('_', '-') }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.rst"
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug.replace('_', '-') }}"
documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug.replace('_', '-') }}/"
keywords = []
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
{%- if cookiecutter.open_source_license in license_classifiers %}
    "{{ license_classifiers[cookiecutter.open_source_license] }}",
{%- endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
]
packages = [
    { include = "{{ cookiecutter.project_slug }}" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.7"
fire = "*"
loguru = "*"
dynaconf = "*"

[tool.poetry.dev-dependencies]
pytest = "*"
flake8 = "*"
pre-commit = "*"
coverage = "*"
tox = "*"
sphinx-rtd-theme = "*"
toml = "*"

[tool.poetry.scripts]
{{ cookiecutter.project_slug.replace('_', '-') }} = "{{ cookiecutter.project_slug }}.dynaconf.cli:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug.replace('_', '-') }}/issues"

[tool.pytest.ini_options]
testpaths = "tests"

[tool.coverage.run]
branch = true
source = [
    "{{ cookiecutter.project_slug }}",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about fire commands
    "fire.Fire",
]
fail_under = 90
ignore_errors = true

[flake8]
max-line-length = 88
max-complexity = 10
per-file-ignores = """
    # imported but unused
    __init__.py: F401
# """

[mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unreachable = true
show_error_codes = true
pretty = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
